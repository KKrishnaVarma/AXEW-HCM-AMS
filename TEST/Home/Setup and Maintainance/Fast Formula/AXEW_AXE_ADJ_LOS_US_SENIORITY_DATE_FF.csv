FORMULA_ID,FORMULA_TEXT
300000168530075,"
/****************************************************************************************************************************************************************************************************************************
Formula Name: AXEW_AXE_ADJ_LOS_US_SENIORITY_DATE_FF
Formula Type: Employment Seniority Date Adjustment
Description : Calculate US Adjusted Length of Service Seniority Date From AXEW_SERVICE_DATES Person EIT Value
Org/Developer					Date				Comments
-------------------------------------------------------------------------------------------------------------
Deloitte/Karthikeya Andey			06/20/2021			Initial version

Important points to consider:
-----------------------------
1. For inactive Employees, EFF effective start date should be present between Employees hire date and termination date. 
2. For active Employees, EFF effective start date can be present post hire date. If it is greater than system date, then Seniority date will be adjusted only on EFF effective start date.
3. If only top of the stack EFF record is present, then only top of the stack seniority date record will be adjusted to match with Adjusted Length of Service EFF date value.
4. If historical EFF records are present, then all the corresponding seniority date records will be adjusted to match with respective Adjusted Length of Service EFF date values.
5. If Active Employees has more than two effective sequences on Work Relationship Start Date then this FF will skip the adjusted. These Scenarios to be handled manually.
6. If Employee is hired and terminated on same day and if it has more than two effective sequences on Work Relationship Start Date then this FF will skip the adjusted. These Scenarios to be handled manually.
*****************************************************************************************************************************************************************************************************************************/
DEFAULT FOR PER_ASG_EFFECTIVE_SEQUENCE IS -1
DEFAULT FOR PER_ASG_ACTION_CODE IS ' '
DEFAULT FOR PER_ASG_REL_DATE_START IS '0001/01/01 00:00:00' (date)
DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT FOR PER_SYS_DATE_TIME IS ' '

DEFAULT FOR EFFECTIVE_START_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT FOR EFFECTIVE_END_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT FOR SENIORITY_DATE_CODE IS ' '
DEFAULT FOR CUMULATIVE_FLAG IS ' '
DEFAULT FOR BASE_SENIORITY_DATE IS '0001/01/01 00:00:00' (date)

DEFAULT_DATA_VALUE FOR PER_EXT_WORK_REL_DATE_START IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_EXT_WORK_REL_ACTUAL_TERMINATION_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_EXT_WORK_REL_PERIOD_TYPE IS ' '
DEFAULT_DATA_VALUE FOR PER_EXT_WORK_REL_PRIMARY_FLAG IS ' '

DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS ' '
DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (DATE)

DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' '
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_MANUAL_ADJUSTMENT_DAYS IS 0
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_TOTAL_MANUAL_ADJUSTMENT_DAYS IS 0
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_TOTAL_AUTO_ADJUSTMENT_DAYS IS 0
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_TOTAL_ADJUSTMENT_DAYS IS 0
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_END_DATE IS '0001/01/01 00:00:00' (date)
DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EXIT_DATE IS '0001/01/01 00:00:00' (date)

INPUTS ARE	EFFECTIVE_START_DATE (DATE),
		EFFECTIVE_END_DATE (DATE),
		BASE_SENIORITY_DATE (DATE),
		SENIORITY_DATE_CODE (TEXT),
		CUMULATIVE_FLAG (TEXT)

seniority_adjust_in_days	= 0
seniority_adjust_comment 	= 'Auto adjustment based on Service Dates EIT'
eff_date			= EFFECTIVE_START_DATE

l_eff_seq_flag_check		= 'TRUE'
l_previous_sen_adjust_days	= 0
l_seniority_date_code		= SENIORITY_DATE_CODE
l_sysdate			= SUBSTR(PER_SYS_DATE_TIME, 1, 10)
l_temp_date			= l_sysdate
l_manual_adj_days		= 0
l_cumulative_update_days	= 0
l_diff_in_days			= 0
l_auto_adj_days_sum		= 0
l_previous_termination_date	= '0001/01/01 00:00:00' (date)
l_eit_adj_service_date		= '0001/01/01 00:00:00' (date)

/*l_original_hire_date 		= BASE_SENIORITY_DATE  */
l_original_hire_date 		= GET_VALUE_SET('AXEW_EMP_ORIGINAL_HIRE_DATE_VS', '|=PER_ID='
									||TO_CHAR(GET_CONTEXT(PERSON_ID,0))
									||'|')

IF (PER_ASG_EFFECTIVE_SEQUENCE > 1 AND TO_CHAR(eff_date, 'YYYY-MM-DD') != TO_CHAR(EFFECTIVE_END_DATE, 'YYYY-MM-DD')) THEN
(
	l_eff_seq_flag_check = 'FALSE'
)

IF (PER_ASG_EFFECTIVE_SEQUENCE > 1 AND TO_CHAR(eff_date, 'YYYY-MM-DD') = TO_CHAR(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'YYYY-MM-DD')) THEN
(
	l_eff_seq_flag_check = 'FALSE'
)

IF (PER_ASG_EFFECTIVE_SEQUENCE > 2) THEN
(
	l_eff_seq_flag_check = 'FALSE'
)

IF (TO_CHAR(eff_date, 'YYYY-MM-DD') = TO_CHAR(PER_ASG_REL_DATE_START, 'YYYY-MM-DD')) AND (l_eff_seq_flag_check = 'TRUE') THEN
( 	
	i = PER_EXT_WORK_REL_DATE_START.FIRST(-1)
	m = i
	WHILE PER_EXT_WORK_REL_DATE_START.EXISTS(i) LOOP
	(
		IF PER_EXT_WORK_REL_PERIOD_TYPE[i] = 'E' 
		THEN
		(
			j = TO_NUMBER(TO_CHAR(PER_EXT_WORK_REL_DATE_START[i],'YYYYMMDD'))
			l_hire_dates_array[j] = 1
			m = m + 1
		)
		i = i + 1
	)
	
	k = 1
	l = l_hire_dates_array.FIRST(-1)
	WHILE k < m LOOP
	(	
		k = k + 1

		l_arr_index = PER_EXT_WORK_REL_DATE_START.FIRST(-1)
		WHILE PER_EXT_WORK_REL_DATE_START.EXISTS(l_arr_index) LOOP
		(
			IF TO_CHAR(PER_EXT_WORK_REL_DATE_START[l_arr_index], 'YYYYMMDD') = TO_CHAR(l) THEN
			(				
				IF TO_CHAR(PER_EXT_WORK_REL_DATE_START[l_arr_index], 'YYYY-MM-DD') <= TO_CHAR(eff_date, 'YYYY-MM-DD') 
				   AND PER_EXT_WORK_REL_PERIOD_TYPE[l_arr_index]  = 'E' 
				THEN
				(
					IF TO_CHAR(l_previous_termination_date, 'YYYY-MM-DD') != '0001-01-01' THEN
					(
						l_cumulative_update_days = l_cumulative_update_days + (DAYS_BETWEEN(PER_EXT_WORK_REL_DATE_START[l_arr_index], l_previous_termination_date) - 1)
					)
					l_previous_termination_date = PER_EXT_WORK_REL_ACTUAL_TERMINATION_DATE[l_arr_index]
					
					CHANGE_CONTEXTS(EFFECTIVE_DATE = PER_EXT_WORK_REL_DATE_START[l_arr_index])
					(
						l_arr_index_sub1 = PER_SENDT_F_V3_EFFECTIVE_START_DATE.FIRST(-1)
						WHILE PER_SENDT_F_V3_EFFECTIVE_START_DATE.EXISTS(l_arr_index_sub1) LOOP
						(
							IF (TO_CHAR(PER_EXT_WORK_REL_DATE_START[l_arr_index], 'YYYY-MM-DD') = TO_CHAR(PER_SENDT_F_V3_EFFECTIVE_START_DATE[l_arr_index_sub1], 'YYYY-MM-DD')
  							    AND PER_SENDT_F_V3_SENIORITY_DATE_CODE[l_arr_index_sub1] =  l_seniority_date_code) THEN
							(							
								l_manual_adj_days  = l_manual_adj_days + PER_SENDT_F_V3_MANUAL_ADJUSTMENT_DAYS[l_arr_index_sub1]
							)
							l_arr_index_sub1 = PER_SENDT_F_V3_EFFECTIVE_START_DATE.NEXT(l_arr_index_sub1, -1)
						)
					)
					
					IF TO_CHAR(PER_EXT_WORK_REL_ACTUAL_TERMINATION_DATE[l_arr_index], 'YYYY-MM-DD') != '0001-01-01' THEN
					(
						l_temp_date = TO_CHAR(PER_EXT_WORK_REL_ACTUAL_TERMINATION_DATE[l_arr_index], 'YYYY-MM-DD')
					)ELSE
					(
						l_temp_date = l_sysdate
					)
								
					l_EIT_PEI_INFO_Default = '0001-01-01' 
					l_arr_index_sub2 = PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1.FIRST(-1)
					WHILE PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1.EXISTS(l_arr_index_sub2) LOOP
					(
						IF PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY[l_arr_index_sub2] = 'AXEW_SERVICE_DATES' 
						AND l_temp_date >= TO_CHAR(PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE[l_arr_index_sub2], 'YYYY-MM-DD')
						AND l_temp_date <= TO_CHAR(PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE[l_arr_index_sub2], 'YYYY-MM-DD')
						AND  l_EIT_PEI_INFO_Default < TO_CHAR(PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1[i], 'YYYY-MM-DD')
						THEN
						(
							l_diff_in_days 		= DAYS_BETWEEN(TO_DATE(l_original_hire_date, 'YYYY-MM-DD'), PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1[l_arr_index_sub2])
							l_auto_adj_days_sum = l_auto_adj_days_sum + l_diff_in_days
							
							l_eit_adj_service_date = PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1[l_arr_index_sub2]
						)
						l_arr_index_sub2 = PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1.NEXT(l_arr_index_sub2, -1)
					)
					
					IF (l_diff_in_days != 0 OR (l_diff_in_days = 0 AND l_original_hire_date = TO_CHAR(l_eit_adj_service_date, 'YYYY-MM-DD'))) THEN
					(
						seniority_adjust_in_days = (l_diff_in_days - ((-1 * l_cumulative_update_days) + l_previous_sen_adjust_days)) - l_manual_adj_days
						
						l_previous_sen_adjust_days = seniority_adjust_in_days + l_previous_sen_adjust_days
					)
				)
			)
			
			l_arr_index = PER_EXT_WORK_REL_DATE_START.NEXT(l_arr_index, -1)
		)
		
		IF k < m THEN
		(
			l = l_hire_dates_array.NEXT(l,-1)
		)
	)	
)

RETURN eff_date, seniority_adjust_comment, seniority_adjust_in_days"
